#+title: ${1:`
(string-join
 (mapcar #'capitalize
         ;; Replace -,_... with space
         (split-string
          (let (case-fold-search)
            ;; Seperating lower from upper: hello|World
            (replace-regexp-in-string
             "\\([[:lower:]]\\)\\([[:upper:]]\\)" "\\1 \\2"
             ;; Separating upper from (upper and lower): HTTP|Server
             (replace-regexp-in-string "\\([[:upper:]]\\)\\([[:upper:]][0-9[:lower:]]\\)"
                                       "\\1 \\2" (file-name-base buffer-file-name))))
          "[^[:word:]0-9]+"
          )) " " )
`}
#+date:    `(format-time-string "%Y-%m-%d")`
#+author: Ismael Jaras
#+startup: overview

$0

* Tasks [/]
* Resources
* Meetings
* Timeframe
* Notes
* Ideas
* Questions
* Code
* General time report
** today
#+BEGIN: clocktable :scope file :block today
#+CAPTION: Clock summary at [2023-09-23 Sa 13:35], for Samstag, September 23, 2023.
| Headline     | Time   |
|--------------+--------|
| *Total time* | *0:00* |
#+END:
** daily last week
#+BEGIN: clocktable :scope file :step day :block thisweek

Daily report: [2023-09-18 Mo]
| Headline     | Time   |
|--------------+--------|
| *Total time* | *0:00* |

Daily report: [2023-09-19 Di]
| Headline     | Time   |
|--------------+--------|
| *Total time* | *0:00* |

Daily report: [2023-09-20 Mi]
| Headline     | Time   |
|--------------+--------|
| *Total time* | *0:00* |

Daily report: [2023-09-21 Do]
| Headline     | Time   |
|--------------+--------|
| *Total time* | *0:00* |

Daily report: [2023-09-22 Fr]
| Headline     | Time   |
|--------------+--------|
| *Total time* | *0:00* |

Daily report: [2023-09-23 Sa]
| Headline     | Time   |
|--------------+--------|
| *Total time* | *0:00* |

Daily report: [2023-09-24 So]
| Headline     | Time   |
|--------------+--------|
| *Total time* | *0:00* |
#+END:

** weekly last month
#+BEGIN: clocktable :scope file :step week :block thismonth

Weekly report starting on: [2023-09-01 Fr]
| Headline     | Time   |
|--------------+--------|
| *Total time* | *0:00* |

Weekly report starting on: [2023-09-04 Mo]
| Headline     | Time   |
|--------------+--------|
| *Total time* | *0:00* |

Weekly report starting on: [2023-09-11 Mo]
| Headline     | Time   |
|--------------+--------|
| *Total time* | *0:00* |

Weekly report starting on: [2023-09-18 Mo]
| Headline     | Time   |
|--------------+--------|
| *Total time* | *0:00* |

Weekly report starting on: [2023-09-25 Mo]
| Headline     | Time   |
|--------------+--------|
| *Total time* | *0:00* |
#+END:

** Historic
#+BEGIN: clocktable :scope file :block untilnow
#+CAPTION: Clock summary at [2023-09-23 Sa 13:35], for now.
| Headline     | Time   |
|--------------+--------|
| *Total time* | *0:00* |
#+END:
** pie chart
#+NAME: piechart
#+BEGIN_SRC python :var data=htime :results output :exports results
import matplotlib.pyplot as plt

# Extract meaningful rows from the Org table
labels = []
sizes = []

data_start_at = 2  # Skip the header rows
current_parent = None
has_children = False
parent_time = 0
label_row = 0
parent_time_row = 1
child_time_row = 2
fig_len = 10

for row in data[data_start_at:]:
    if row[label_row].startswith(r'\_'):  # Child task
        has_children = True  # Mark that the parent has children
        child_label = row[label_row].strip()
        parent_label = current_parent
        full_label = f"{parent_label}{child_label}"  # Combine parent and child
        labels.append(full_label)

        # Process time for the child (column 3)
        time = row[child_time_row].strip()
        if time:
            hours, minutes = map(int, time.split(':'))
            total_minutes = hours * 60 + minutes
            sizes.append(total_minutes)

    else:  # Parent task
        if current_parent and not has_children:
            # If the previous parent has no children, use its total time
            labels.append(current_parent)
            sizes.append(parent_time)

        # Update current parent
        current_parent = row[label_row].strip()
        has_children = False  # Reset the child tracker

        # Process time for the parent
        time = row[parent_time_row].strip()
        if time:
            if 'd' in time:
                # Convert days and hours into total minutes
                days, hours_minutes = time.split('d')
                hours, minutes = map(int, hours_minutes.split(':'))
                parent_time = int(days) * 24 * 60 + hours * 60 + minutes
            else:
                hours, minutes = map(int, time.split(':'))
                parent_time = hours * 60 + minutes

# Handle the last parent (if it has no children)
if current_parent and not has_children:
    labels.append(current_parent)
    sizes.append(parent_time)

# Plot the pie chart
plt.figure(figsize=(fig_len, fig_len))
plt.pie(sizes, labels=labels, autopct='%1.1f%%', startangle=140)
plt.title("Time Distribution")
plt.show()
#+END_SRC

#+RESULTS: piechart
